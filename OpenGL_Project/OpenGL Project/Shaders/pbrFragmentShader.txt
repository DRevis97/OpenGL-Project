#version 330 core
out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;

uniform vec3 camPos;

uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;

uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

const float PI = 3.14159265359;


vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoords);
    vec2 st2 = dFdy(TexCoords);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float n_dot_h = max(dot(N, H), 0.0);
	float n_dot_h2 = n_dot_h*n_dot_h;
	
	float numerator = a2;
	float denominator = (n_dot_h2 * (a2 - 1.0) + 1.0);
	
	denominator = PI * denominator * denominator;
	return numerator / denominator;


}

float GeometrySchlickGGX(float n_dot_v, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float numerator = n_dot_v;
	float denominator = n_dot_v * (1.0 - k) + k;
	
	return numerator / denominator;

}

float GeometrySmith(vec3 n, vec3 v, vec3 l, float roughness)
{
	float n_dot_v = max(dot(n, v), 0.0);
	float n_dot_l = max(dot(n, l), 0.0);
	
	float ggx2 = GeometrySchlickGGX(n_dot_v, roughness);
	float ggx1 = GeometrySchlickGGX(n_dot_l, roughness);
	
	return ggx1 * ggx2;


}


vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);


}



void main()
{
	vec3 albedo = pow(texture(albedoMap, TexCoords).rgb, vec3(2.2));
	float metallic = texture(metallicMap, TexCoords).r;
	float roughness = texture(roughnessMap, TexCoords).r;
	float ao = texture(aoMap, TexCoords).r;

	vec3 N = normalize(Normal);
	vec3 V = normalize(camPos - WorldPos);
	
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);
	
	vec3 L0 = vec3(0.0);
	for(int i = 0; i < 4; ++i)
	{
		vec3 l = normalize(lightPositions[i] - WorldPos); //vector l
		vec3 H = normalize(V + l); //halfway vector;
		
		float distance = length(lightPositions[i] - WorldPos);
		float attenuation = 1.0 / (distance*distance);
		vec3 radiance = lightColors[i] * attenuation;
		
		
		float NDF = DistributionGGX(N, H, roughness);
		float G = GeometrySmith(N, V, l, roughness);
		vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);
		
		vec3 numerator = NDF * G * F;
		float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, l), 0.0);
		vec3 specular = numerator / max(denominator, 0.001);
		
		vec3 ks = F;
		vec3 kd = vec3(1.0) - ks;
		
		kd *= 1.0 - metallic;
		
		float N_dot_L = max(dot(N, l), 0.0);
		L0 += (kd * albedo / PI + specular) * radiance * N_dot_L;
	
	}
	
	vec3 ambient = vec3(0.03) * albedo * ao;
	vec3 color = ambient + L0;
	
	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));
	
	FragColor = vec4(color, 1.0);



}